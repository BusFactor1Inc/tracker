;; -*- mode: lisp -*-
(load "macros.ps")
(load "utils.ps")

(defvar default-num-channels 12)
(defvar default-pattern-length 32)

(defmodel *Note
    init (lambda (instrument pitch fx arg)
           (this.create :instrument instrument)
           (this.create :pitch pitch)
           (this.create :fx fx)
           (this.create :arg arg)
           ))

(defcontainer *Channel *Note
  init (lambda (name size)
         (this.create :size (or size default-pattern-length))
         (this.create :name name)
         (this.create :gain 128)
         (this.create :pan 128)
         (this.create :mute f)
         (this.create :solo f)

         (dotimes (i (this.size))
           (this.add (new (*Class *Note))))))

(defcontainer *Pattern *Channel
  init (lambda (index name size)
         (this.create :size (or size default-num-channels))
         (this.create :index index)
         (this.create :name (or name index))
         (dotimes (i (this.size))
           (this.add (new (*Class *Channel i))))

         (this.on :close-channel
                  (lambda (e)
                    (this.remove e.value)))
         (this.on :add-channel
                  (lambda (e)
                    (let ((i ((@ this index-of) e.value)))
                      ((@ this insert-at) (1+ i) (new (*Class *Channel "--"))))))
         (this.on :copy-channel
                  (lambda (e)
                    (let ((i ((@ this index-of) e.value)))
                      ((@ this insert-at) (1+ i) (e.value.copy)))))
         (this.on :move-channel-left
                  (lambda (e)
                    (let ((i ((@ this index-of) e.value)))
                      (if (> i 0)
                          (this.swap i (1- i))))))
         (this.on :move-channel-right
                  (lambda (e)
                    (let ((i ((@ this index-of) e.value)))
                      (if (< i (- this.length 1))
                          (this.swap i (1+ i))))))
         ))

(defcontainer *Song *Pattern
  init (lambda (name name)
         (this.create :size (or size 1))
         (this.create :name (or name index))))

(load "common-views.ps")
(load "note-view.ps")
(load "channel-view.ps")
(load "pattern-edit-view.ps")

((@ ($ document) ready)
 (lambda ()
   (let* ((note (new (*Class *Note)))
          (pattern (new (*Class *Pattern 0)))
          (note-view (new (*View *Note-view note)))
          (pattern-view (new (*View *Pattern-view pattern))))
     ((@ ($ 'body) html) ((@ pattern-view render))))))
   
