;; -*- mode: lisp -*-
(load "macros.ps")
(load "utils.ps")

(deftiny-button-view *Channel-move-left-button-view 'channel :move-channel-left
                     :class-name "ChannelLeftButton")
(deftiny-button-view *Channel-move-right-button-view 'channel :move-channel-right
                     :class-name "ChannelRightButton")
(deftiny-button-view *Channel-add-button-view 'channel :add-channel
                     :class-name "ChanneAddButton")
(deftiny-button-view *Channel-copy-button-view 'channel :copy-channel
                     :class-name "ChannelCopyButton")
(deftiny-button-view *Channel-close-button-view 'channel :close-channel
                     :confirm-message (+ ((@ options user-name))
                                         ", are you sure you want to delete this channel?")
                     :class-name "ChannelCloseButton")

(defview *Channel-monitor-view
    model 'channel
    events (create
            'click (lambda (e)
                     (alert :click))))

(defview *Channel-index-view
    model 'channel
    init (lambda ()
           (this.channel.on "change:index" this.render this))
    render (lambda ()
             ((@ this $el html) (+ (hex ((@ this channel index))) ":"))))
    
(defview *Channel-title-view
    model 'channel
    init (lambda (model index)
           (this.create 'index-view (new (*View *Channel-index-view model)))
           (this.create 'left-button (new (*View *Channel-move-left-button-view model)))
           (this.create 'right-button (new (*View *Channel-move-right-button-view model)))
           (this.create 'close-button (new (*View *Channel-close-button-view model)))
           (this.create 'add-button (new (*View *Channel-add-button-view model)))
           (this.create 'copy-button (new (*View *Channel-copy-button-view model))))
    render (lambda ()
             (let ((html (array
                          (@ ((@ this index-view)) $el)
                          (@ ((@ this left-button)) $el)
                          (@ ((@ this right-button)) $el)
                          (@ ((@ this add-button)) $el)
                          (@ ((@ this copy-button)) $el)
                          (@ ((@ this close-button)) $el))))
               (this.$el.html html))))

(defview *Channel-solo-button-view
    model 'channel
    events (create
            :click (lambda (e)
                     (this.channel.solo (not (this.channel.solo)))
                     (this.render)))
    render (lambda ()
             (if (this.channel.solo)
                 (this.$el.attr 'class "Button ButtonEnabled")
                 (this.$el.attr 'class "Button ButtonDisabled"))
             (this.$el.text "S")))

(defview *Channel-mute-button-view
    model 'channel
    events (create
            :click (lambda (e)
                     (this.channel.mute (not (this.channel.mute)))
                     (this.render)))
    render (lambda ()
             (if (this.channel.mute)
                 (this.$el.attr 'class "Button ButtonEnabled")
                 (this.$el.attr 'class "Button ButtonDisabled"))
             (this.$el.text "M")))

(defview *Channel-controls-view
    model 'channel
    init (lambda (model)
           (this.create 'solo-button (new (*View *Channel-solo-button-view this.channel)))
           (this.create 'mute-button (new (*View *Channel-mute-button-view this.channel)))
           (this.create 'gain-view (new (*View *Hex-value-edit-view this.channel
                                               "ChannelGainView" this.channel.gain 2)))
           (this.create 'pan-view (new (*View *Hex-value-edit-view this.channel
                                               "ChannelPanView" this.channel.pan 2))))
    render (lambda ()
             (let ((html (array
                          (@ ((@ this gain-view)) $el)
                          (@ ((@ this solo-button)) $el)
                          (@ ((@ this mute-button)) $el)
                          (@ ((@ this pan-view)) $el))))
               (this.$el.html html))))

(defview *Channel-view
    model 'channel
    contains '*Note-view
    events (create
            'mousedown (lambda (e)
                         ((@ e prevent-default)))
            'click (lambda (e)
                     ((@ e prevent-default))
                     (this.trigger :channel-select this)))

    init (lambda (model)
           (this.create 'title-view (new (*View *Channel-title-view this.channel)))
           (this.create 'name-view (new (*View *String-value-edit-view this.channel
                                               "ChannelNameView" this.channel.name 12)))
           (this.create 'controls-view (new (*View *Channel-controls-view this.channel)))
           (this.create 'monitor-view (new (*View *Channel-monitor-view)))
           (this.create 'selected f)
           (this.on "change:selected" (lambda (e)
                                        (if (@ e value)
                                            ((@ this $el remove-class) "ChannelSelected")
                                            ((@ this $el add-class) "ChannelSelected"))))
           (this.channel.on :resize this.render this))

    render (lambda ()
             (this.clear)
             (let* ((i 0)
                    (html (this.channel.map
                           (lambda (note)
                             (let ((view (new (*View *Note-view note))))
                               (when (= 0 (rem i 4))
                                 ((@ (@ view $el) attr) :class "NoteViewHighlight"))
                               (incf i)
                               (this.add view)
                               (@  view $el))) this)))
               ((@ html unshift) (@ ((@ this controls-view)) $el))
               ((@ html unshift) (@ ((@ this monitor-view)) $el))
               ((@ html unshift) (@ ((@ this name-view)) $el))
               ((@ html unshift) (@ ((@ this title-view)) $el))
               (this.$el.html html))))
